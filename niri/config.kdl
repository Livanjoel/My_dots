// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input

// mi-config-environment-variables
cursor {
    xcursor-size 16
}

debug {
    // intel D128
    render-drm-device "/dev/dri/renderD128"
    emulate-zero-presentation-time
    wait-for-frame-completion-before-queueing
    strict-new-window-focus-policy
}

input {
    //focus-follows-mouse
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }

        // Enable numlock on startup, omitting this setting disables it.
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        accel-speed 2.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
}

// running `niri msg outputs` while inside a niri instance.
output "eDP-1" {
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    mode "1366x768@60.01"
    scale 0.68
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"
    position x=1280 y=0
}

// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 2


    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesnt fit
    //   together with the previously focused column.
    center-focused-column "on-overflow"

    // "switch-preset-column-width" (Mod+R)
    preset-column-widths {
        proportion 0.45
        proportion 0.7
        proportion 1.0

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // "switch-preset-window-height" (Mod+Shift+R)
    preset-window-heights {
        proportion 0.45
        proportion 0.7
        proportion 1.0
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.45; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you dont like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.


    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        //on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        // softness 10

        // Spread expands the shadow.
        // spread 10

        // Offset moves the shadow relative to the window.
         //offset x=0 y=5

        // You can also change the shadow color and opacity.
         //color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    struts {
        top 1
        bottom 6
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

//autostart-apps
spawn-at-startup "swww-daemon"
spawn-at-startup "waybar"
// spawn-at-startup "albert"
spawn-at-startup "dunst"
spawn-at-startup "emacs --daemon"
spawn-at-startup "bash" "-c" "clipse -listen-shell"
// spawn-at-startup "xwayland-satellite"

// media-removable
spawn-at-startup "bash" "-c" "udiskie --no-automount --smart-tray"

//conectivity
spawn-at-startup "bash" "-c" "nm-applet --indicator"
spawn-at-startup "bash" "-c" "blueman-applet"

//satellite

environment {
    DISPLAY ":1"
    MOZ_ENABLE_WAYLAND "1"
    QT_QPA_PLATFORMTHEME "qt6ct"
    QT_QPA_PLATFORM "wayland"
    SDL_VIDEODRIVER "wayland"
    CLUTTER_BACKEND "wayland"
    XDG_SESSION_TYPE "wayland"
    GDK_BACKEND "wayland"
    SDL_VIDEODRIVER "wayland"
    CLUTTER_BACKEND "wayland"
    XDG_CURRENT_DESKTOP "Niri"
    XDG_SESSION_DESKTOP "Niri"
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
// prefer-no-csd

// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
// screenshot-path null

// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // off
    // Slow down all animations by this factor. Values below 1 speed them up
    slowdown 0.85
}

// Window rules let you adjust behavior for individual windows.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerms initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}
overview {
    backdrop-color "#0D0F18"
    zoom 0.8
    workspace-shadow {
       off
    }
}
window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
    match is-focused=true
    tiled-state true
    focus-ring {
        width 3
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#7fc8ff"

        // Color of the ring on inactive monitors.
        inactive-color "#505050"

    }

    border {
        off
        width 3
        active-color "#ffc87f"
        // inactive-color "#7fc8ff"

        // Color of the border around windows that request your attention.
        // urgent-color "#9b0000"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }
}
gestures {
    hot-corners {
        off
    }
}
window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
    match is-focused=true
}

//floating-windows
window-rule {
    match app-id="telegram"
    match app-id="blueman-manager"
    match app-id="org.pulseaudio.pavucontrol"
    match title="Settings — Albert"
    match app-id="ghostty"
    match app-id="vlc"
    match app-id="dolphin"
    match app-id="clipse"
    match app-id="qownnotes"
    match app-id="mpv"
    match app-id="imv"
    match app-id="org.kde.keditfiletype"
    match app-id="kvantummanager"
    open-floating true
    default-floating-position x=0 y=0 relative-to="top-right"
    max-width 1900
    max-height 1300
}

window-rule {
    match app-id="showmethekey-gtk"
    open-floating true
    default-floating-position x=0 y=0 relative-to="top-right"
}
binds {
    // `niri msg action do-something`.



    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+0 { spawn "bash" "-c" "killall waybar || waybar"; }
    //Hardware control
    F8 { spawn "bash" "-c" "~/.local/lib/hyde/brightnesscontrol.sh -d"; }
    F9 { spawn "bash" "-c" "~/.local/lib/hyde/brightnesscontrol.sh -i"; }
    F11 { spawn "bash" "-c" "~/.local/lib/hyde/volumecontrol.sh -o d"; }
    F10 { spawn "bash" "-c" "~/.local/lib/hyde/volumecontrol.sh -o m"; }
    F12 { spawn "bash" "-c" "~/.local/lib/hyde/volumecontrol.sh -o i"; }

    //music
    XF86AudioPause { spawn "bash" "-c" "playerctl play-pause"; }
    XF86AudioPlay { spawn "bash" "-c" "playerctl play-pause"; }
    XF86AudioNext { spawn "bash" "-c" "playerctl next"; }
    XF86AudioPrev { spawn "bash" "-c" "playerctl previous"; }

    //Apps
    Mod+A { spawn "sh" "-c" "~/.local/lib/hyde/rofilaunch.sh" ; }
    Mod+Q { close-window; }
    Mod+T { spawn "kitty"; }
    Mod+B { spawn "zen-browser"; }
    Mod+Alt+L { spawn "hyprlock"; }
    Mod+E { spawn "dolphin"; }
    Mod+Z { spawn "bash" "-c" "emacsclient -c"; }
    Alt+Ctrl+P { spawn "bash" "-c" "hyprpicker -an"; }
    Mod+S { spawn "clipse-gui"; }
    Mod+N { spawn "showmethekey-gtk"; }

    //windows-movement
    Mod+O repeat=false { toggle-overview; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }
    Mod+Ctrl+Minus { set-window-width "-10%"; }
    Mod+Ctrl+Equal { set-window-width "+10%"; }


    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }


    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    Mod+Alt+Down         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }



    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }

    // Expand the focused column to space not taken up by other fully visible columns.
    // Makes the column "fill the rest of the space".
    Mod+Ctrl+F { expand-column-to-available-width; }
    Mod+Shift+F { fullscreen-window; }
    Mod+F { maximize-column; }

    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }


    // Move the focused window between the floating and the tiling layout.
    Mod+Shift+V       { toggle-window-floating; }
    Mod+V { switch-focus-between-floating-and-tiling; }

    // Screenshots
    Mod+P { screenshot; }
    Mod+Ctrl+P { screenshot-screen; }
    Mod+Alt+P { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+M { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}